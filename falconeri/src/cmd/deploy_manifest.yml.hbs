{{#if all}}
---
# PostgreSQL volume: Stores our data semi-persistently.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: falconeri-postgres
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: "{{config.postgres_storage}}"
  # You'll need to have an appropriate storage class defined on your cluster.
  # This is defined by default on GKE, and it will allocated and deallocate
  # persistent cloud volumes.
  storageClassName: standard
{{/if}}

---
# PostgreSQL deployment: Keeps one PostgreSQL server running.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: falconeri-postgres
  labels:
    app: falconeri-postgres
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: falconeri-postgres
  template:
    metadata:
      labels:
        app: falconeri-postgres
    spec:
      containers:
      - name: falconeri-postgres
        image: postgres
        # We no longer need a huge number of connections thanks to falconerid,
        # but we might want to tune shared_buffers and maybe kernel.shmmax as
        # well.
        args: ["postgres"]
        resources:
          requests:
            cpu: "{{config.postgres_cpu}}"
            memory: "{{config.postgres_memory}}"
        volumeMounts:
          # To prevent data loss, it's critically important to mount onto
          # `../data`. But we can only do that using `subPath` or PostgreSQL
          # will error out.
          - name: pgdata
            mountPath: /var/lib/postgresql/data
            subPath: postgres
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: falconeri
              key: POSTGRES_PASSWORD
        ports:
        - containerPort: 5432
      volumes:
        - name: pgdata
          persistentVolumeClaim:
            claimName: falconeri-postgres

---
# PostgreSQL service: Provides DNS lookup for service.
kind: Service
apiVersion: v1
metadata:
  name: falconeri-postgres
spec:
  selector:
    app: falconeri-postgres
  ports:
  - port: 5432

---
# falconerid deployment: Keeps some falconerid servers running.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: falconerid
  labels:
    app: falconerid
spec:
  replicas: {{config.falconerid_replicas}}
  selector:
    matchLabels:
      app: falconerid
  template:
    metadata:
      labels:
        app: falconerid
    spec:
      containers:
      - name: falconerid
        image: faraday/falconeri:{{config.version}}
{{#if config.use_local_image}}
        imagePullPolicy: Never
{{/if}}
        args: ["falconerid"]
        env:
        - name: ROCKET_ENV
          value: "{{config.env}}"
        resources:
          requests:
            cpu: "{{config.falconerid_cpu}}"
            memory: "{{config.falconerid_memory}}"
          limits:
            memory: "{{config.falconerid_memory}}"
        ports:
        - containerPort: 8089
        volumeMounts:
        - mountPath: /etc/falconeri/secrets
          name: secrets
      serviceAccountName: falconerid
      volumes:
      - name: secrets
        secret:
          secretName: falconeri

---
# falconerid service: Provides DNS lookup for falconerid.
kind: Service
apiVersion: v1
metadata:
  name: falconerid
spec:
  selector:
    app: falconerid
  ports:
  - port: 8089

---
# falconerid service account.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: falconerid

---
# falconerid role: Authorizes use of Kubernetes API.
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: falconerid
  labels:
    app: falconerid
rules:
# We need read access to all secrets, because the user might ask us to make
# aribtrary secrets available to jobs. We strongly recommend running falconeri
# in its own namespace.
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
# We'll eventually need access to most operations on batch jobs, so just ask for
# all the roles permitted by the standard `ClusterRole/admin` role.
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["create", "delete", "deletecollection", "patch", "update", "get", "list", "watch"]
# We'll eventually need read-only access to pod information to manage various
# monitoring and recovery tasks.
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
# falconerid role binding: Binds `falconerid` role to `falconerid` service account.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: falconerid
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: falconerid
subjects:
- kind: ServiceAccount
  name: falconerid
